<!doctype html>
<html lang="pt-BR">
<head>
  <!--
    ‚ö†Ô∏è DEPRECATED FILE - DO NOT USE ‚ö†Ô∏è
    This file has been replaced by admin.html (formerly admin-refactored.html)
    Use the new web component-based implementation instead.
    This file is kept for reference only.
  -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Dashboard (DEPRECATED)</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Ubuntu+Sans:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="styles.css">
  
</head>
<body class="admin-page">
    <div class="container">
  <header>
    <img src="./avecta-logo.svg" alt="Avecta AI Logo" class="avecta-logo">
  </header>

    <h2>Painel Geral</h2>
    <div class="quick-stats">

        <div class="quick-stats-item quick-stats__total">
          <div class="quick-stats__icon">
            <div class="quick-stats__counter">
              <span>0</span>
            </div>
            <i><img src="./total-icon.svg" alt="" srcset=""></i>
          </div>
          <p class="quick-stats__label"></p>
        </div>

        <div class="quick-stats-item quick-stats__enviados">
          <div class="quick-stats__icon">
            <div class="quick-stats__counter">
              <span>0</span>
            </div>
            <i><img src="./enviado-icon.svg" alt="" srcset=""></i>
          </div>
          <p class="quick-stats__label"></p>
        </div>

        <div class="quick-stats-item quick-stats__respondidos">
          <div class="quick-stats__icon">
            <div class="quick-stats__counter">
              <span>0</span>
            </div>
            <i><img src="./recebido-icon.svg" alt="" srcset=""></i>
          </div>
          <p class="quick-stats__label"></p>
        </div>

        <div class="quick-stats-item quick-stats__pendentes">
          <div class="quick-stats__icon">
            <div class="quick-stats__counter">
              <span>0</span>
            </div>
            <i><img src="./pendente-icon.svg" alt="" srcset=""></i>
          </div>
          <p class="quick-stats__label"></p>
        </div>
    </div>

  <div class="actions-toggle m-2">
      <a href="#" id="toggleActions" aria-expanded="false" aria-controls="actionsBar">Mostrar a√ß√µes</a>
    </div>
  <div class="ds-inline-controls mb-8" id="actionsBar">
      <input id="filterNeighborhood" class="ds-input" placeholder="Filtrar por bairro">
      <select id="filterAnswered" class="ds-select">
        <option value="">Todos</option>
        <option value="true">Respondidos</option>
        <option value="false">N√£o respondidos</option>
      </select>
      <button id="btnFilter" class="ds-btn">Aplicar Filtro</button>
      <button id="btnExport" class="ds-btn ds-btn--secondary">Exportar CSV</button>
    </div>

    <!-- New Column-Switching Table -->
    <div class="contacts-table-container">
      <div class="table-header">
        <div class="table-title">Contatos</div>
        <div class="column-navigation">
          <button id="reset-demo-inline" class="btn-inline hidden mr-8">Reset Demo Data</button>
          <button id="restore-seed-inline" class="btn-inline btn-success hidden mr-8">Restore Demo Data</button>
          <button class="nav-button" id="prevColumn" onclick="switchColumn(-1)">‚Äπ</button>
          <div class="column-indicator" id="columnIndicator">Nome ‚Ä¢ Idade</div>
          <button class="nav-button" id="nextColumn" onclick="switchColumn(1)">‚Ä∫</button>
        </div>
      </div>
      
      <div class="contacts-table-scroll">
        <table class="contacts-table" id="newContactsTable">
          <thead>
            <tr>
              <th class="fixed-column">Nome</th>
              <th id="dynamicColumnHeader">Idade</th>
              <th>A√ß√µes</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Slide-up Panel for Citizen Details -->
  <div class="slide-panel-overlay" id="slidePanelOverlay" onclick="closeCitizenPanel()">
  </div>
  
  <div class="slide-panel" id="slidePanel">
    <div class="slide-panel-handle" onclick="closeCitizenPanel()"></div>
    
    <div class="slide-panel-header">
      <h2 class="slide-panel-title" id="citizenName">Detalhes do Cidad√£o</h2>
      <button class="slide-panel-close" onclick="closeCitizenPanel()">&times;</button>
    </div>
    
    <div class="slide-panel-content" id="citizenDetails">
      <!-- Content will be populated by JavaScript -->
    </div>
  </div>

  <!-- Enhanced AI Chat Widget -->
  <div class="chat-widget">
    <div class="performance-indicator" id="performanceIndicator">Ready</div>
    <button type="button" class="chat-toggle" id="chatToggle">
      <div class="notification-badge" id="notificationBadge">!</div>
      <img src="./ia-icon.svg" alt="icone de IA" srcset="" id="toggleIcon">
    </button>

    <div class="chat-container" id="chatContainer">
      <div class="chat-header">
        <div>
          <div class="chat-title">Assistente IA</div>
          <div class="chat-status" id="chatStatus">Ativo</div>
        </div>
        <button type="button" class="chat-close" id="chatClose">&times;</button>
      </div>
      
      <div class="chat-messages" id="chatMessages">
        <div class="message bot">
          <div class="message-avatar"><img src="./ia-icon.svg" alt="IA Icon" srcset=""></div>
          <div class="message-content">
            <div class="agent-badge">System</div>
              <p>Sou o Assistente de IA da AvectaAI! Tenho acesso aos dados reais de pesquisa e posso ajudar com:</p>
              <ul>
                <li>üìä <strong>Agente de Conhecimento</strong> - An√°lise de Satisfa√ß√£o, An√°lise de Problemas, An√°lise de Bairros</li>
                <li>üì± <strong>Agente de Notifica√ß√£o</strong> - Notifica√ß√µes de Atualiza√ß√µes, Notifica√ß√µes Generalistas, Notifica√ß√µes Seguimentadas</li>
                <li>üé´ <strong>Agente de Sistema</strong> - Status do Sistema, Dados e Informa√ß√µes, Exporta√ß√µes</li>
              </ul>

            <div class="quick-suggestions">
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('Show satisfaction analysis')">An√°lise de Satisfa√ß√£o</button>
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('Find dissatisfied residents')">An√°lise de Insatisfa√ß√£o</button>
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('Which neighborhoods need follow-up')">An√°lise de Bairros</button>
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('System status')">Status do Sistema</button>
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('Listar moradores interessados em participar')">Participa√ß√£o: interessados</button>
              <button type="button" class="quick-suggestion" onclick="sendQuickMessage('Mostrar moradores que n√£o querem participar')">Participa√ß√£o: n√£o interessados</button>
              <button type="button" class="quick-suggestion" onclick="window.open('age-satisfaction.html','_blank')">Relat√≥rio: Satisfa√ß√£o por Idade</button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="chat-input-container">
        <div class="typing-indicator" id="typingIndicator">
          <div class="message-avatar">ü§ñ</div>
          <div class="typing-dots">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
          </div>
          <span class="text-xs text-muted ml-8">AI analyzing data...</span>
        </div>
        
        <div class="chat-input-wrapper">
          <textarea 
            class="chat-input" 
            id="chatInput" 
            placeholder="Try: 'analyze satisfaction by neighborhood' or 'send follow-up to dissatisfied residents'"
            rows="1"
          ></textarea>
          <button type="button" class="send-button" id="sendButton">
            <img src="./send-icon.svg" alt="" srcset="">
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="./toast.js"></script>
  <script>
    // Initialize shared ToastManager for admin
    const toastManager = new ToastManager();
  // Column switching functionality
  let currentColumnIndex = 0;
  let lastDirection = 0; // -1 prev, 1 next (for animation direction)
  let contactsData = [];
  
const columns = [
    { key: 'age', label: 'Idade', render: (value) => value || '‚Äî' },
    { key: 'neighborhood', label: 'Bairro', render: (value) => value || '‚Äî' },
    { key: 'whatsapp', label: 'WhatsApp', render: (value) => {
        if (!value) return '‚Äî';
        // Truncate WhatsApp for display but keep full value in title
        const display = value.length > 15 ? value.substring(0, 12) + '...' : value;
        return `<span title="${value}">${display}</span>`;
    }},
    { key: 'whatsappSentAt', label: 'Enviado', render: (value) => value ? '<span class="status-badge status-sent">‚úì</span>' : '<span class="status-badge status-pending">‚Äî</span>' },
    { key: 'whatsappStatus', label: 'Status', render: (value) => value ? `<span class="status-badge status-${value}">${value.substring(0, 8)}</span>` : '‚Äî' },
    { key: 'clickedAt', label: 'Clicou', render: (value) => value ? new Date(value).toLocaleDateString() : '‚Äî' },
    { key: 'survey', label: 'Respondeu', render: (value) => value ? '<span class="status-badge status-answered">‚úì</span>' : '<span class="status-badge status-pending">‚úó</span>' }
];

  function switchColumn(direction) {
    const newIndex = currentColumnIndex + direction;
    
    // Check bounds and prevent navigation beyond limits
    if (newIndex < 0 || newIndex >= columns.length) {
      return; // Don't change index if we're at the boundaries
    }
    
    currentColumnIndex = newIndex;
    lastDirection = direction;
    
    // prevent whole table flashing during update
    const table = document.getElementById('newContactsTable');
    
    if (table) table.classList.add('is-updating');
    
    updateTableView();
  }

function updateTableView() {
    const currentColumn = columns[currentColumnIndex];
    const header = document.getElementById('dynamicColumnHeader');
    const indicator = document.getElementById('columnIndicator');
    const tbody = document.querySelector('#newContactsTable tbody');
    const table = document.getElementById('newContactsTable');
    const prevButton = document.getElementById('prevColumn');
    const nextButton = document.getElementById('nextColumn');
    
    // Update header and indicator
    header.textContent = currentColumn.label;
    indicator.textContent = `Nome ‚Ä¢ ${currentColumn.label}`;
    
    // Update navigation buttons
    prevButton.disabled = currentColumnIndex === 0;
    nextButton.disabled = currentColumnIndex === columns.length - 1;
    
    // Re-render table body with current column
    tbody.innerHTML = '';
    contactsData.forEach(contact => {
        const tr = document.createElement('tr');
        tr.onclick = () => openCitizenPanel(contact);
        
        // Create cells with proper truncation
        const nameCell = document.createElement('td');
        nameCell.className = 'fixed-column';
        nameCell.textContent = contact.name;
        nameCell.title = contact.name; // Show full name on hover
        
        const dynamicCell = document.createElement('td');
        dynamicCell.className = 'dynamic-cell';
        dynamicCell.innerHTML = currentColumn.render(contact[currentColumn.key]);
        // Directional slide-in animation only after a user-initiated switch
        if (lastDirection !== 0) {
          const dirClass = lastDirection > 0 ? 'col-slide-in-right' : 'col-slide-in-left';
          dynamicCell.classList.add(dirClass);
          dynamicCell.addEventListener('animationend', () => {
            dynamicCell.classList.remove('col-slide-in-left', 'col-slide-in-right');
          }, { once: true });
        }
        
        // Add title for truncated content
        if (typeof contact[currentColumn.key] === 'string') {
            dynamicCell.title = contact[currentColumn.key];
        }
        
  const actionCell = document.createElement('td');
  actionCell.innerHTML = `<button class="action-button secondary" onclick="event.stopPropagation(); openCitizenPanelById(${contact.id})">Detalhes</button>`;
        
        tr.appendChild(nameCell);
        tr.appendChild(dynamicCell);
        tr.appendChild(actionCell);
    tbody.appendChild(tr);
    });

    // Remove is-updating after dynamic cell animation completes to avoid flashes
    if (table) {
      const dynamicCells = tbody.querySelectorAll('.dynamic-cell');
      if (lastDirection !== 0 && dynamicCells.length) {
        let done = 0;
        const total = dynamicCells.length;
        const cleanup = () => {
          done += 1;
          if (done >= total) table.classList.remove('is-updating');
        };
        dynamicCells.forEach(dc => dc.addEventListener('animationend', cleanup, { once: true }));
        // Fallback safety timeout in case animationend doesn't fire
        setTimeout(() => table.classList.remove('is-updating'), 400);
      } else {
        // No directional animation (e.g., initial render)
        requestAnimationFrame(() => table.classList.remove('is-updating'));
      }
    }
}

  // Slide Panel Functionality
  function openCitizenPanel(citizen) {
    const overlay = document.getElementById('slidePanelOverlay');
    const panel = document.getElementById('slidePanel');
    const nameElement = document.getElementById('citizenName');
    const detailsElement = document.getElementById('citizenDetails');
    
    // Set citizen name
    nameElement.textContent = citizen.name || 'Cidad√£o';
    
    // Generate detailed view
    detailsElement.innerHTML = generateCitizenDetails(citizen);
    
    // Show panel with animation
    overlay.classList.add('active');
    panel.classList.add('active');
    
    // Prevent body scroll when panel is open
    document.body.style.overflow = 'hidden';
  }

  function openCitizenPanelById(id) {
    const contact = contactsData.find(c => c.id === id);
    if (!contact) { alert('Contato n√£o encontrado.'); return; }
    openCitizenPanel(contact);
  }

  function closeCitizenPanel() {
    const overlay = document.getElementById('slidePanelOverlay');
    const panel = document.getElementById('slidePanel');
    
    overlay.classList.remove('active');
    panel.classList.remove('active');
    
    // Restore body scroll
    document.body.style.overflow = '';
  }

  function generateCitizenDetails(citizen) {
    const formatDate = (dateStr) => {
      if (!dateStr) return '‚Äî';
      return new Date(dateStr).toLocaleString('pt-BR');
    };

    const formatPhone = (phone) => {
      if (!phone) return '‚Äî';
      const cleaned = phone.replace(/\D/g, '');
      if (cleaned.length === 11) {
        return `(${cleaned.slice(0,2)}) ${cleaned.slice(2,7)}-${cleaned.slice(7)}`;
      }
      return phone;
    };

    const generateStars = (rating) => {
      if (!rating) return '<span class="empty">N√£o avaliado</span>';
      const stars = [];
      for (let i = 1; i <= 5; i++) {
        stars.push(`<span class="star ${i <= rating ? '' : 'empty'}">‚òÖ</span>`);
      }
      return stars.join('');
    };

    // Map real survey satisfaction to a 1‚Äì5 score for the star UI
    const mapSatisfactionToRating = (s) => {
      if (!s) return null;
      const map = {
        'Muito satisfeito': 5,
        'Satisfeito': 4,
        'Neutro': 3,
        'Insatisfeito': 2,
        'Muito insatisfeito': 1
      };
      return map[s] ?? null;
    };

    const satisfactionRating = citizen.survey ? mapSatisfactionToRating(citizen.survey.satisfaction) : null;

    return `
      <div class="citizen-detail-grid">
        <!-- Personal Information -->
        <div class="detail-card">
          <h3>Informa√ß√µes Pessoais</h3>
          <div class="detail-field">
            <span class="detail-label">Nome Completo</span>
            <span class="detail-value">${citizen.name || '‚Äî'}</span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Idade</span>
            <span class="detail-value">${citizen.age || '‚Äî'} anos</span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Bairro</span>
            <span class="detail-value">${citizen.neighborhood || '‚Äî'}</span>
          </div>
        </div>

        <!-- Contact Information -->
        <div class="detail-card">
          <h3>Contato</h3>
          <div class="detail-field">
            <span class="detail-label">WhatsApp</span>
            <span class="detail-value">${formatPhone(citizen.whatsapp)}</span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Status de Envio</span>
            <span class="detail-value">
              ${citizen.whatsappSentAt ? 
                `<span class="status-badge status-sent">Enviado em ${formatDate(citizen.whatsappSentAt)}</span>` : 
                '<span class="status-badge status-pending">N√£o enviado</span>'
              }
            </span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Status WhatsApp</span>
            <span class="detail-value">
              ${citizen.whatsappStatus ? 
                `<span class="status-badge status-${citizen.whatsappStatus}">${citizen.whatsappStatus}</span>` : 
                '‚Äî'
              }
            </span>
          </div>
        </div>

        <!-- Interaction History -->
        <div class="detail-card">
          <h3>Hist√≥rico de Intera√ß√£o</h3>
          <div class="detail-field">
            <span class="detail-label">Link Clicado</span>
            <span class="detail-value">
              ${citizen.clickedAt ? 
                `‚úÖ ${formatDate(citizen.clickedAt)}` : 
                '<span class="status-badge status-pending">N√£o clicou</span>'
              }
            </span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Pesquisa Respondida</span>
            <span class="detail-value">
              ${citizen.survey ? 
                `‚úÖ ${formatDate(citizen.survey.answeredAt)}` : 
                '<span class="status-badge status-pending">N√£o respondeu</span>'
              }
            </span>
          </div>
        </div>

        <!-- System Data -->
        <div class="detail-card">
          <h3>Dados do Sistema</h3>
          <div class="detail-field">
            <span class="detail-label">ID do Contato</span>
            <span class="detail-value">#${citizen.id}</span>
          </div>
          <div class="detail-field">
            <span class="detail-label">Criado em</span>
            <span class="detail-value">${formatDate(citizen.createdAt)}</span>
          </div>
          <div class="detail-field">
            <span class="detail-label">√öltima Atualiza√ß√£o</span>
            <span class="detail-value">${formatDate(citizen.updatedAt)}</span>
          </div>
        </div>
      </div>

      ${citizen.survey ? `
        <div class="survey-response">
          <h4>
            Resposta da Pesquisa
          </h4>

          <!-- Removed star rating; show satisfaction text only -->
          <div class="detail-field">
            <span class="detail-label">Satisfa√ß√£o</span>
            <span class="detail-value">${citizen.survey.satisfaction || '‚Äî'}</span>
          </div>

          <div class="detail-field">
            <span class="detail-label">Problema principal</span>
            <span class="detail-value">${citizen.survey.issue || '‚Äî'}</span>
          </div>

          ${citizen.survey.otherIssue ? `
            <div class="detail-field">
              <span class="detail-label">Detalhe do problema</span>
              <span class="detail-value">${citizen.survey.otherIssue}</span>
            </div>
          ` : ''}

          <div class="detail-field">
            <span class="detail-label">Interessado em participar</span>
            <span class="detail-value">${citizen.survey.participate || '‚Äî'}</span>
          </div>

          <div class="detail-field">
            <span class="detail-label">Respondido em</span>
            <span class="detail-value">${formatDate(citizen.survey.answeredAt)}</span>
          </div>
        </div>
      ` : `
        <div class="empty-state">
          <div class="empty-state-icon">üìù</div>
          <h3>Nenhuma resposta de pesquisa</h3>
          <p>Este cidad√£o ainda n√£o respondeu √† pesquisa de satisfa√ß√£o.</p>
        </div>
      `}

      <div class="action-buttons">
        <button class="panel-action-button secondary" onclick="(async () => { 
          const loading = toastManager ? toastManager.info('Abrindo WhatsApp...', { title: 'Processando', progress: true, duration: 8000 }) : null;
          try {
            openWhatsAppWithTemplateById(${citizen.id});
            await fetch('/api/contacts/${citizen.id}/mark-sent', { method: 'POST' });
            if (toastManager && loading) toastManager.remove(loading);
            if (toastManager) toastManager.success('Marcado como enviado.', { title: 'Conclu√≠do' });
            loadContacts();
          } catch (e) {
            if (toastManager && loading) toastManager.remove(loading);
            if (toastManager) toastManager.error('N√£o foi poss√≠vel marcar como enviado.', { title: 'Erro' });
          }
        })()">Abrir no WhatsApp</button>
        <button class="panel-action-button" onclick="copySurveyLinkById(${citizen.id})">Copiar Link</button>
      </div>
    `;
  }

  function exportCitizenData(citizenId) {
    const citizen = contactsData.find(c => c.id === citizenId);
    if (!citizen) return;
    
    const data = {
      ...citizen,
      exportedAt: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `citizen-${citizen.id}-${citizen.name.replace(/\s+/g, '-')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // Fetch real data with graceful fallbacks to local files and finally stub
  async function fetchContactsData() {
    const candidates = [
      '/api/contacts?legacy=true',
      '/data.json',
      '../data.json',
      './data.json'
    ];
    for (const url of candidates) {
      try {
        const res = await fetch(url, { cache: 'no-store' });
        if (!res.ok) continue;
        const body = await res.json();
        if (Array.isArray(body)) return body;
        if (body && Array.isArray(body.data)) return body.data;
      } catch (e) {
        // try next candidate
      }
    }
    return STUB_CONTACTS;
  }

  async function loadContacts() {
    // Todo: Isolate the DOM elements caching at the index.html file
    let neighborhood = document.getElementById('filterNeighborhood').value.trim().toLowerCase();
    let answered = document.getElementById('filterAnswered').value; // '', 'true', 'false'

    // Load from API/file with fallback
    let data = await fetchContactsData();

    //Todo: It seems to me that the data is being mutated
    // Apply filters client-side
    if (neighborhood) {
      data = data.filter(c => (c.neighborhood || '').toLowerCase().includes(neighborhood));
    }

    //Todo: It seems to me that the data is being mutated AGAIN
    if (answered === 'true') {
      data = data.filter(c => !!c.survey);
    } else if (answered === 'false') {
      data = data.filter(c => !c.survey);
    }

    // Update in-memory dataset for the table
    contactsData = data;

    // Render the single table and update stats
    updateTableView();
    updateQuickStats(data);
  }

  function updateQuickStats(data) {
    const total = data.length;
    const answered = data.filter(d => d.survey).length;
    const sent = data.filter(d => d.whatsappSentAt).length;
    const pending = data.filter(d => !d.survey).length;

    const totalCounter = document.querySelector(".quick-stats__total .quick-stats__counter span");
    const sentCounter = document.querySelector(".quick-stats__enviados .quick-stats__counter span");
    const answeredCounter = document.querySelector(".quick-stats__respondidos .quick-stats__counter span");
    const pendingCounter = document.querySelector(".quick-stats__pendentes .quick-stats__counter span");

    totalCounter.textContent = total;
    sentCounter.textContent = sent;
    answeredCounter.textContent = answered;
    pendingCounter.textContent = pending;

    const totalLabel = document.querySelector(".quick-stats__total .quick-stats__label");
    const sentLabel = document.querySelector(".quick-stats__enviados .quick-stats__label");
    const answeredLabel = document.querySelector(".quick-stats__respondidos .quick-stats__label");
    const pendingLabel = document.querySelector(".quick-stats__pendentes .quick-stats__label");

    totalLabel.textContent = "Total";
    sentLabel.textContent = "Enviadas";
    answeredLabel.textContent = "Respondidas";
    pendingLabel.textContent = "Pendentes";
  }

  async function sendWhatsApp(id) {
    const contact = contactsData.find(c => c.id === id);
    if (!contact) { alert('Contato n√£o encontrado.'); return; }
    openWhatsAppWithTemplate(contact);
    try {
      await fetch(`/api/contacts/${id}/mark-sent`, { method: 'POST' });
      loadContacts();
    } catch (e) {
      console.warn('Falha ao marcar como enviado manualmente:', e);
    }
  }

  // Open WhatsApp with a prefilled template message using contact id
  function openWhatsAppWithTemplateById(id) {
    const contact = contactsData.find(c => c.id === id);
    if (!contact || !contact.whatsapp) {
      alert('Contato sem WhatsApp v√°lido.');
      return;
    }
    openWhatsAppWithTemplate(contact);
  }

  // Build wa.me link with a message template
  function openWhatsAppWithTemplate(contact) {
    const phone = String(contact.whatsapp || '').replace(/\D/g, '');
    const name = contact.name || 'cidad√£o';
    const neighborhood = contact.neighborhood || 'seu bairro';
  const base = window.APP_BASE_URL || window.location.origin;

    // Basic outreach template; customize as needed
  const message = `Ol√°, ${name}! Agradecemos a sua participa√ß√£o no Bingo do Bem.\nEstamos realizando uma pesquisa r√°pida sobre as necessidades do bairro ${neighborhood}.\nPedimos para que responda a pesquisa, leva s√≥ 1 minuto!\nAtenciosamente, Luana e Marion.`;
    const url = `https://wa.me/${phone}?text=${encodeURIComponent(message)}`;
    window.open(url, '_blank');
  }

  // Copy survey link to clipboard (like index.html)
  function copySurveyLinkById(id) {
    const contact = contactsData.find(c => c.id === id);
    if (!contact) {
      if (typeof toastManager !== 'undefined') {
        toastManager.error('Contato n√£o encontrado.', { title: 'Erro' });
      } else {
        alert('Contato n√£o encontrado.');
      }
      return;
    }
    const base = window.APP_BASE_URL || window.location.origin;
    const surveyLink = `${base}/survey.html?id=${contact.id}`;
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(surveyLink)
        .then(() => {
          if (typeof toastManager !== 'undefined') {
            toastManager.success('Link copiado. Agora cole no WhatsApp.', { title: 'Copiado' });
          } else {
            alert('Link copiado! Agora cole no WhatsApp.');
          }
        })
        .catch(() => {
          if (typeof toastManager !== 'undefined') {
            toastManager.error('N√£o foi poss√≠vel copiar automaticamente. Copie manualmente.', { title: 'Erro' });
          } else {
            alert('N√£o foi poss√≠vel copiar automaticamente. Copie manualmente: ' + surveyLink);
          }
        });
    } else {
      // Fallback
      const ta = document.createElement('textarea');
      ta.value = surveyLink;
      document.body.appendChild(ta);
      ta.select();
      try { 
        document.execCommand('copy'); 
        if (typeof toastManager !== 'undefined') {
          toastManager.success('Link copiado. Agora cole no WhatsApp.', { title: 'Copiado' });
        } else {
          alert('Link copiado! Agora cole no WhatsApp.');
        }
      }
      catch { 
        if (typeof toastManager !== 'undefined') {
          toastManager.error('N√£o foi poss√≠vel copiar automaticamente. Copie manualmente.', { title: 'Erro' });
        } else {
          alert('N√£o foi poss√≠vel copiar automaticamente. Copie manualmente: ' + surveyLink);
        }
      }
      document.body.removeChild(ta);
    }
  }

  document.getElementById("btnFilter").addEventListener("click", loadContacts);
  document.getElementById("btnExport").addEventListener("click", () => {
    window.location.href = "/api/export";
  });

  // Toggle actions bar visibility
  const toggleActionsLink = document.getElementById('toggleActions');
  const actionsBar = document.getElementById('actionsBar');
  // initialize collapsed
  actionsBar.classList.remove('open');
  toggleActionsLink.addEventListener('click', (e) => {
    e.preventDefault();
    const willOpen = !actionsBar.classList.contains('open');
    actionsBar.classList.toggle('open', willOpen);
    toggleActionsLink.textContent = willOpen ? 'Ocultar a√ß√µes' : 'Mostrar a√ß√µes';
    toggleActionsLink.setAttribute('aria-expanded', String(willOpen));
  });

  // Close panel on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeCitizenPanel();
    }
  });

  // Enhanced AI Chat Widget
  class EnhancedChatWidget {
    constructor() {
      this.isOpen = false;
      this.isProcessing = false;
      this.messageHistory = [];
      this.initializeElements();
      this.attachEventListeners();
      this.loadSystemHealth();
    }

    initializeElements() {
      this.chatToggle = document.getElementById('chatToggle');
      this.chatContainer = document.getElementById('chatContainer');
      this.chatClose = document.getElementById('chatClose');
      this.chatMessages = document.getElementById('chatMessages');
      this.chatInput = document.getElementById('chatInput');
      this.sendButton = document.getElementById('sendButton');
      this.typingIndicator = document.getElementById('typingIndicator');
      this.chatStatus = document.getElementById('chatStatus');
      this.notificationBadge = document.getElementById('notificationBadge');
      this.performanceIndicator = document.getElementById('performanceIndicator');
    }

    attachEventListeners() {
      this.chatToggle.addEventListener('click', () => this.toggleChat());
      this.chatClose.addEventListener('click', () => this.closeChat());
      this.sendButton.addEventListener('click', () => this.sendMessage());
      
      this.chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });

      this.chatInput.addEventListener('input', () => this.autoResize());

      // Close chat when clicking outside
      document.addEventListener('click', (e) => {
        if (this.isOpen && !this.chatContainer.contains(e.target) && !this.chatToggle.contains(e.target)) {
          this.closeChat();
        }
      });
    }

    toggleChat() {
      if (this.isOpen) {
        this.closeChat();
      } else {
        this.openChat();
      }
    }

    openChat() {
      this.isOpen = true;
      this.chatContainer.classList.add('open');
      this.chatInput.focus();
      this.hideNotification();
      this.scrollToBottom();
    }

    closeChat() {
      this.isOpen = false;
      this.chatContainer.classList.remove('open');
    }

    showNotification() {
      this.notificationBadge.classList.add('show');
    }

    hideNotification() {
      this.notificationBadge.classList.remove('show');
    }

    autoResize() {
      this.chatInput.style.height = 'auto';
      this.chatInput.style.height = Math.min(this.chatInput.scrollHeight, 80) + 'px';
    }

    async sendMessage() {
      const message = this.chatInput.value.trim();
      if (!message || this.isProcessing) return;

      this.addMessage(message, 'user');
      this.chatInput.value = '';
      this.autoResize();
      
      await this.processMessage(message);
    }

    addMessage(content, sender, metadata = null) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${sender}`;

      const avatar = document.createElement('div');
      avatar.className = 'message-avatar';
      avatar.textContent = sender === 'user' ? 'üë§' : 'ü§ñ';

      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      
      if (metadata && metadata.agent) {
        const badge = document.createElement('div');
        badge.className = `agent-badge ${metadata.agent.toLowerCase().replace(' ', '-')}`;
        badge.textContent = metadata.agent;
        messageContent.appendChild(badge);
      }

      const textContent = document.createElement('div');
      textContent.innerHTML = this.formatMessage(content);
      messageContent.appendChild(textContent);

      if (metadata) {
        const metaDiv = document.createElement('div');
        metaDiv.className = 'response-metadata';
        metaDiv.innerHTML = this.formatMetadata(metadata);
        messageContent.appendChild(metaDiv);
      }

      messageDiv.appendChild(avatar);
      messageDiv.appendChild(messageContent);

      this.chatMessages.appendChild(messageDiv);
      this.scrollToBottom();

      return messageDiv;
    }

    formatMessage(content) {
      // Handle natural language responses properly
      if (typeof content === 'string') {
        return content.replace(/\n/g, '<br>');
      }
      
      // If it's still an object (fallback), format it better
      if (typeof content === 'object') {
        // Try to extract natural language from common response patterns
        let html = '';
        const analysis = content.analysis || content;

        if (analysis.summary) {
          html += `<div class="summary-box">${analysis.summary.replace(/\n/g, '<br>')}</div>`;
        }

        // Show resident list if present and non-empty
        if (Array.isArray(analysis.residents) && analysis.residents.length > 0) {
          html += `<div class="mt-12"><strong>Lista de residentes:</strong><ul class="list-offset">`;
          analysis.residents.forEach((resident, idx) => {
            html += `<li>
              <strong>${resident.name}</strong> (${resident.neighborhood || '‚Äî'})<br>
                Satisfa√ß√£o: <span class="metric-highlight">${resident.satisfaction || resident.priority || '‚Äî'}</span>
                ${(resident.issue || resident.mainIssue) ? `<br>Problema: ${resident.issue || resident.mainIssue}` : ''}
                ${(resident.participate !== undefined ? `<br>Participa√ß√£o: ${resident.participate}` : (resident.participateInterest !== undefined ? `<br>Participa√ß√£o: ${resident.participateInterest}` : ''))}
                ${resident.whatsapp ? `<br>WhatsApp: <a href="https://wa.me/${resident.whatsapp.replace(/\D/g, '')}" target="_blank">${resident.whatsapp}</a>` : ''}
            </li>`;
          });
          html += `</ul></div>`;
        }

        // Show insights and recommendations if present
        if (Array.isArray(analysis.insights) && analysis.insights.length > 0) {
          html += `<div class="mt-10"><strong>Insights:</strong><ul class="insights-list">`;
          analysis.insights.forEach(i => html += `<li>${i}</li>`);
          html += `</ul></div>`;
        }
        if (Array.isArray(analysis.recommendations) && analysis.recommendations.length > 0) {
          html += `<div class="mt-10"><strong>Recomenda√ß√µes:</strong><ul class="insights-list">`;
          analysis.recommendations.forEach(r => html += `<li>${r}</li>`);
          html += `</ul></div>`;
        }

        // Fallback for other object types
        if (!html) {
          html = this.formatFallbackResponse(content);
        }

        return html;
      }
      
      return String(content);
    }

    formatFallbackResponse(response) {
      let html = '';
      
      // Format as natural text instead of technical data
      if (response.query) {
        html += `I processed your query: "${response.query}"<br><br>`;
      }
      
      if (response.intent) {
        html += `The ${response.intent} agent handled this request. `;
      }
      
      if (response.success) {
        html += 'The operation completed successfully.';
      }
      
      return html;
    }

    formatMetadata(metadata) {
      let parts = [];
      
      if (metadata.intent) {
        parts.push(`Intent: ${metadata.intent}`);
      }
      
      if (metadata.confidence) {
        parts.push(`Confidence: ${(metadata.confidence * 100).toFixed(0)}%`);
      }
      
      if (metadata.timestamp) {
        const time = new Date(metadata.timestamp).toLocaleTimeString();
        parts.push(`Time: ${time}`);
      }

      return parts.join(' ‚Ä¢ ');
    }

    showTyping() {
      this.typingIndicator.classList.add('show');
      this.scrollToBottom();
    }

    hideTyping() {
      this.typingIndicator.classList.remove('show');
    }

    async processMessage(message) {
      this.isProcessing = true;
      this.sendButton.disabled = true;
      this.showTyping();
      
      const startTime = Date.now();
      
      try {
        this.updateStatus('Processing query...');
        this.updatePerformance('Processing...');
        
        // Use streamlined UI endpoint
        const response = await fetch('/api/admin/agent-ui', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ query: message })
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }

        const result = await response.json();
        const processingTime = Date.now() - startTime;
        
        this.hideTyping();
        
        if (result.success) {
          // Prefer rich structured rendering using analysis fields when present
          const residentsForSummary = Array.isArray(result.residents) ? result.residents : [];
          let summaryText = (result.report && result.report.text) ? result.report.text : (result.response || result.message || 'Query processed successfully');
          if (residentsForSummary.length) {
            const list = residentsForSummary.map((r, idx) => `${idx + 1}. ${r.name} (${r.neighborhood || '‚Äî'})${r.satisfaction ? ` ‚Ä¢ ${r.satisfaction}` : ''}`).join('\n');
            summaryText += `\n\nRESIDENTES (${residentsForSummary.length}):\n${list}`;
          }
          const analysisPayload = {
            analysis: {
              summary: summaryText,
              residents: residentsForSummary,
              insights: Array.isArray(result.insights) ? result.insights : [],
              recommendations: Array.isArray(result.recommendations) ? result.recommendations : [],
              report: result.report || null
            }
          };

          // Persist the generated analysis payload so report.html can render the exact same data
          const rid = `r_${Date.now()}_${Math.random().toString(36).slice(2,8)}`;
          try {
            const payload = { query: message, result };
            localStorage.setItem(`reportPayload:${rid}`, JSON.stringify(payload));
          } catch (e) {
            console.warn('Failed to store report payload:', e);
          }

          // Append a convenience link to open full report page with reference id
          const q = encodeURIComponent(message);
          const base = window.APP_BASE_URL || window.location.origin;
          const linkHtml = `<div class="mt-10"><a href="${base}/report.html?rid=${encodeURIComponent(rid)}&q=${q}" target="_blank" class="link-primary bold">Abrir relat√≥rio completo ‚Üó</a></div>`;
          analysisPayload.analysis.summary = (analysisPayload.analysis.summary || '') + `\n\n` + linkHtml;

          this.addMessage(analysisPayload, 'bot', {
            agent: result.intent ? `${result.intent.charAt(0).toUpperCase() + result.intent.slice(1)} Agent` : 'AI Assistant',
            intent: result.intent,
            timestamp: result.timestamp,
            confidence: result.confidence
          });
          
          this.updateStatus(`${result.intent ? result.intent.charAt(0).toUpperCase() + result.intent.slice(1) : 'AI'} Agent Ready`);
          this.updatePerformance(`${processingTime}ms`);
        } else {
          this.addMessage(result.response || `Error: ${result.error || 'Unknown error occurred'}`, 'bot', {
            agent: 'System',
            timestamp: new Date().toISOString()
          });
          
          this.updateStatus('Error - Please try again');
          this.updatePerformance('Error');
        }

        // Refresh table data after processing
        loadContacts();

      } catch (error) {
        console.error('Chat error:', error);
        this.hideTyping();
        this.addMessage(`Connection error: ${error.message}. Please check if the server is running.`, 'bot', {
          agent: 'System',
          timestamp: new Date().toISOString()
        });
        this.updateStatus('Connection Error');
        this.updatePerformance('Failed');
      } finally {
        this.isProcessing = false;
        this.sendButton.disabled = false;
      }
    }

    updateStatus(status) {
      this.chatStatus.textContent = status;
    }

    updatePerformance(performance) {
      this.performanceIndicator.textContent = performance;
    }

    scrollToBottom() {
      setTimeout(() => {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
      }, 100);
    }

    async loadSystemHealth() {
      try {
        const response = await fetch('/api/health');
        const data = await response.json();
        
        if (data.database && data.database.contacts > 0) {
          this.updatePerformance(`${data.database.contacts} contacts`);
        }
        
        // Show notification if there are system issues
        if (data.status !== 'healthy') {
          this.showNotification();
        }
      } catch (error) {
        console.error('Failed to load system health:', error);
        this.updatePerformance('Offline');
      }
    }
  }

  function sendQuickMessage(message) {
    const chatWidget = window.chatWidget;
    if (chatWidget) {
      chatWidget.chatInput.value = message;
      if (!chatWidget.isOpen) {
        chatWidget.openChat();
      }
      chatWidget.sendMessage();
    }
  }

  // Initialize everything when page loads
  document.addEventListener('DOMContentLoaded', () => {
    
    loadContacts();
    
    window.chatWidget = new EnhancedChatWidget();
    
    // Fetch runtime config (BASE_URL) once, but safely ignore failures
    fetch('/api/config')
      .then(apiConfigResponse => apiConfigResponse.ok ? apiConfigResponse.json() : null)
      .then(cfg => { 
        if (cfg && cfg.baseUrl) window.APP_BASE_URL = cfg.baseUrl; 
        
        // Inject tiny reset button if demo reset is enabled
        if (cfg && cfg.demoResetEnabled) {
          
          // Show inline header button too (fallback)
          const inlineBtn = document.getElementById('reset-demo-inline');
          
          if (inlineBtn) {
            inlineBtn.style.display = 'inline-block';
            inlineBtn.addEventListener('click', () => {
              const floating = document.getElementById('reset-demo-btn');
              if (floating) floating.click();
            });
          }
          
          // Show restore seed button
          const restoreBtn = document.getElementById('restore-seed-inline');
          if (restoreBtn) {
            restoreBtn.style.display = 'inline-block';
            restoreBtn.addEventListener('click', async () => {
              const loadingToast = toastManager.info('Restaurando dados de demonstra√ß√£o...', { title: 'Processando', progress: true, duration: 10000 });
              try {
                const res = await fetch('/api/admin/restore-seed', { method: 'POST', headers: { 'Content-Type': 'application/json' }, credentials: 'include' });
                const body = await res.json().catch(() => ({}));
                if (!res.ok) throw new Error(body.error || 'Restore failed');
                toastManager.remove(loadingToast);
                toastManager.success(body.message || 'Dados restaurados com sucesso.', { title: 'Conclu√≠do' });
                loadContacts();
              } catch (e) {
                console.error('Restore error:', e);
                toastManager.remove(loadingToast);
                toastManager.error(e.message || 'Falha ao restaurar os dados.', { title: 'Erro' });
              }
            });
          }
          const btn = document.createElement('button');
          btn.id = 'reset-demo-btn';
          btn.textContent = 'Reset Demo Data';
          btn.style.position = 'fixed';
          btn.style.bottom = '20px';
          btn.style.left = '20px';
          btn.style.zIndex = '1001';
          btn.style.padding = '8px 12px';
          btn.style.borderRadius = '8px';
          btn.style.border = '1px solid #e1e5e9';
          btn.style.background = '#fff';
          btn.style.color = '#5200e7';
          btn.style.fontWeight = '600';
          btn.style.boxShadow = '0 4px 10px rgba(0,0,0,0.08)';
          btn.style.cursor = 'pointer';
          btn.title = 'Erase demo contacts (admin only)';
          btn.addEventListener('click', async () => {
            btn.disabled = true;
            btn.textContent = 'Resetting...';
            const loadingToast = toastManager.info('Limpando dados de demonstra√ß√£o...', {
              title: 'Processando',
              progress: true,
              duration: 10000
            });
            try {
              const res = await fetch('/api/admin/reset-data', { method: 'POST', headers: { 'Content-Type': 'application/json' }, credentials: 'include' });
              const body = await res.json().catch(() => ({}));
              if (!res.ok) throw new Error(body.error || 'Reset failed');
            } catch (e) {
              console.error('Reset error:', e);
              btn.disabled = false;
              btn.textContent = 'Reset Demo Data';
              toastManager.remove(loadingToast);
              toastManager.error(e.message || 'Falha ao apagar os dados.', {
                title: 'Erro ao Resetar'
              });
              return;
            }
            toastManager.remove(loadingToast);
            toastManager.success('Dados de demonstra√ß√£o apagados com sucesso.', {
              title: 'Conclu√≠do'
            });
            // Remove button after one successful reset
            btn.remove();
            // Refresh data table
            loadContacts();
          });
          document.body.appendChild(btn);
        }
      })
      .catch(() => {});
    
    // Show a notification after 5 seconds to encourage interaction
    setTimeout(() => {
      if (!window.chatWidget.isOpen) {
        window.chatWidget.showNotification();
      }
    }, 5000);
  });
</script>
</body>
</html>